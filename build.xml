<?xml version="1.0"?>
<project name="Emissions-Commons" default="nirvana" basedir=".">

    <!--  =================== Properties ====================================== -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <property name="env" environment="env" value="env" />
    <property name="J2EE_HOME" value="${env.J2EE_HOME}" />
    <property name="JAVA_HOME" value="${env.JAVA_HOME}" />
    <property name="src.dir" value="src" />
    <property name="lib.dir" value="lib" />

    <property name="test.dir" value="test" />
    <property name="test.unit.dir" value="${test.dir}/unit" />
    <property name="test.integration.dir" value="${test.dir}/integration" />

    <property name="build.home" value="build/sandbox" />
    <property name="build.dist.dir" value="${build.home}/dist" />
    <property name="build.classes.dir" value="${build.dist.dir}/classes" />

    <property name="reports.dir" value="${build.home}/reports" />
    <property name="reports.unittests.dir" value="${reports.dir}/unit-tests" />
    <property name="reports.integrationtests.dir"
              value="${reports.dir}/integration-tests"
    />

    <property name="app.name" value="emf" />
    <property name="app.path" value="/${app.name}" />


    <path id="classpath">
        <pathelement location="${build.classes.dir}" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!--  ===================START Basic Targets ====================================== -->
    <target name="init">
        <mkdir dir="${build.home}" />
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${reports.unittests.dir}" />
        <mkdir dir="${reports.integrationtests.dir}" />
    </target>


    <target name="clean">
        <delete includeemptydirs="true" failonerror="no">
            <fileset dir="${build.home}" includes="**/*" />
        </delete>
    </target>

    <target name="compile-src" depends="clean, init">
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
               target="1.4"
               source="1.4"
        />
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" includes="**/*.*" />
        </copy>
    </target>

    <target name="compile-tests" depends="clean, init, compile-src">
        <javac srcdir="${test.unit.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
        <javac srcdir="${test.integration.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
    </target>

    <target name="compile" depends="clean, init, compile-src, compile-tests" />
    <!--  ===============END  Basic ====================================== -->


    <!--  ===============START  Tests ====================================== -->
    <target name="unit-tests" depends="compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports.unittests.dir}">
                <fileset dir="${test.unit.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="integration-tests"
            depends="compile, setup-emissions-data"
            description="All Integration Tests"
    >
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${reports.integrationtests.dir}">
                <fileset dir="${test.integration.dir}">
                    <include name="**/*Test.java" />
                    <exclude name="**/ReferenceImporterTest.java" />
                    <exclude name="**/ReferenceTablesCreatorTest.java" />
                    <exclude name="**/*ORLImporterTest.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="setup-emissions-data"
            depends="compile"
            description="Sets up Emissions and Reference schema"
    >
        <echo message="Setting up Emissions and Reference schema..." />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />

            <test name="gov.epa.emissions.commons.io.legacy.ReferenceImporterTest"
                  fork="yes"
                  todir="${reports.integrationtests.dir}"
            />
            <test name="gov.epa.emissions.commons.io.ref.ReferenceTablesCreatorTest"
                  fork="yes"
                  todir="${reports.integrationtests.dir}"
            />
        </junit>
        <echo message="Emissions and Reference schema setup complete." />
    </target>

    <!-- DEFAULT target-->
    <target name="nirvana" depends="unit-tests, integration-tests" />

    <!-- Continuous Integration target -->
    <target name="ci-build"
            depends="compile, nirvana"
            description="Continuous Integration build"
    />

    <!--  ===============END  Tests ====================================== -->



    <!--  ===============START CVS Targets ====================================== -->
    <target name="cvs-properties-load">
        <property file=".cvs" />
    </target>
    <target name="cvs-username-check"
            depends="cvs-properties-load"
            unless="cvs.username"
    >
        <echo message="Please create a .cvs file in your project home directory w/ the following properties:"
        />
        <echo message="username='cvs username'" />
    </target>

    <target name="cvs-update" depends="cvs-username-check" if="cvs.username">
        <cvs command="update"
             cvsroot=":pserver:${cvs.username}@cvs.sourceforge.net:/cvsroot/emisview"
             quiet="yes"
             reallyquiet="yes"
             failonerror="yes"
        />
        <echo message="EMF update is complete." />
    </target>

    <!--  ===============END CVS Targets ====================================== -->


    <!--  ===============START  Coverage Targets =============================== -->
    <path id="cobertura.classpath">
        <fileset dir="${lib.dir}/dev/cobertura">
            <include name="**/*.jar" />
        </fileset>
        <path refid="classpath" />
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <property name="coverage.dir" value="${reports.dir}/coverage" />
    <property name="instrumented.dir" value="${coverage.dir}/instrumented" />
    <property name="reports.xml.dir" value="${coverage.dir}/tests/xml" />
    <property name="reports.html.dir" value="${coverage.dir}/tests/html" />
    <property name="coverage.xml.dir" value="${coverage.dir}/coverage/xml" />
    <property name="coverage.html.dir" value="${coverage.dir}/coverage/html" />

    <target name="coverage-init">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${instrumented.dir}" />
        <mkdir dir="${reports.xml.dir}" />
        <mkdir dir="${reports.html.dir}" />
        <mkdir dir="${coverage.xml.dir}" />
        <mkdir dir="${coverage.html.dir}" />
    </target>

    <target name="instrument" depends="coverage-init">
        <delete file="cobertura.ser" />

        <cobertura-instrument todir="${instrumented.dir}">
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/*Test.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="run-instrumented-tests" depends="compile, instrument">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath location="${instrumented.dir}" />
            <classpath refid="classpath" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports.xml.dir}">
                <fileset dir="${test.emf.unit.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${reports.xml.dir}">
            <fileset dir="${reports.xml.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${reports.html.dir}" />
        </junitreport>
    </target>

    <target name="coverage-check">
        <cobertura-check branchrate="34" totallinerate="100" />
    </target>

    <target name="xml-coverage-report">
        <cobertura-report srcdir="${src.dir}}"
                          destdir="${coverage.xml.dir}"
                          format="xml"
        />
    </target>

    <target name="html-coverage-report">
        <cobertura-report destdir="${coverage.html.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>
    </target>

    <target name="coverage"
            depends="compile,instrument,run-instrumented-tests,xml-coverage-report,html-coverage-report"
            description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."
    />
    <!--  ===============END Coverage Targets =============================== -->

    <!-- ================START Distribution Targets ========================= -->
    <target name="dist" depends="nirvana, do-dist" />
    
    <target name="do-dist" depends="compile">
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" includes="**/*" />
        </copy>
        <jar jarfile="${build.home}/${app.name}-${app.version}.jar"
             basedir="${build.classes.dir}"
        />
    </target>
    <!-- ================END Distribution Targets ========================= -->

</project>

